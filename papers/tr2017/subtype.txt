$S$ is a subtype of a type $T$ ($T$ is a supertype of $S$) 
if one of the following is true:
\begin{itemize}
\item $S$ and $T$ are identical types;
\item $S$ is the Undefined type;
\item $S$ is the Null type and $T$ is not the Undefined type;
\item $S$ is an enum type and $T$ is the primitive type Number;
\item $S$ is a string literal type and $T$ is the primitive type String;
\item $S$ and $T$ are class types and all the following are true:
\begin{itemize}
  \item $S$ is a subclass of $T$ (via inheritance chain);
  \item checkMembers($S$,$T$) holds.
\end{itemize}
\item $S$ and $T$ are function types such that all the following hold:
\begin{itemize}
  \item $S$ has at least as many parameters as $T$;
  \item each parameter type in $S$ is a supertype of the corresponding paramter type in $T$;
  \item the result type of $S$ is Void, or the result type of N is a subtype of that of M.
\end{itemize}

%

S is a record type and T is a record/class type
- checkMembers(S,T)

S and T are constructor function types

S and T are array types

checkMembers(S,T)
    for each member M in T one of the following is true:
    - M is a property and S has a property N where
    - M and N have the same name,
    - the type of N is a subtype of that of M,
    - M and N are both public, M and N are both private and originate in the same declaration, M and N are both protected and originate in the same declaration, 
      or M is protected and N is declared in a class derived from the class in which M is declared.
    ? M is a string index signature of type U, and U is the Any type or S has an string index signature of a type that is a subtype of U.
    ? M is a numeric index signature of type U, and U is the Any type or S has an apparent string or numeric index signature of a type that is a subtype of U.






